Forms in React

1. Controlled Components
In controlled components, form data is handled by the React component’s state.

import React, { useState } from 'react';

function MyForm() {
  const [formData, setFormData] = useState({ name: '', email: '' });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value,
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // handle form submission, e.g., send data to server
    console.log('Form data submitted:', formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Name:
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={handleChange}
        />
      </label>
      <br />
      <label>
        Email:
        <input
          type="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
        />
      </label>
      <br />
      <button type="submit">Submit</button>
    </form>
  );
}

export default MyForm;


2. Uncontrolled Components
In uncontrolled components, form data is handled by the DOM itself. React doesn’t control the form inputs directly. You use refs to access form values.

import React, { useRef } from 'react';

function MyForm() {
  const nameRef = useRef(null);
  const emailRef = useRef(null);

  const handleSubmit = (e) => {
    e.preventDefault();
    // Access form data via refs
    const formData = {
      name: nameRef.current.value,
      email: emailRef.current.value,
    };
    console.log('Form data submitted:', formData);
  };

  return (
    <form onSubmit={handleSubmit}>
      <label>
        Name:
        <input type="text" ref={nameRef} />
      </label>
      <br />
      <label>
        Email:
        <input type="email" ref={emailRef} />
      </label>
      <br />
      <button type="submit">Submit</button>
    </form>
  );
}

export default MyForm;

3. Form Libraries
For more complex forms, you might use libraries like:

- Formik: Provides a way to manage form state, validation, and submission.
- React Hook Form: Lightweight and provides an easy way to handle form validation and state.

Formik Example:

import React from 'react';
import { Formik, Form, Field } from 'formik';

function MyForm() {
  return (
    <Formik
      initialValues={{ name: '', email: '' }}
      onSubmit={(values) => {
        console.log('Form data submitted:', values);
      }}
    >
      <Form>
        <label>
          Name:
          <Field type="text" name="name" />
        </label>
        <br />
        <label>
          Email:
          <Field type="email" name="email" />
        </label>
        <br />
        <button type="submit">Submit</button>
      </Form>
    </Formik>
  );
}

export default MyForm;

React Hook Form Example:

import React from 'react';
import { useForm } from 'react-hook-form';

function MyForm() {
  const { register, handleSubmit } = useForm();

  const onSubmit = (data) => {
    console.log('Form data submitted:', data);
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <label>
        Name:
        <input type="text" {...register('name')} />
      </label>
      <br />
      <label>
        Email:
        <input type="email" {...register('email')} />
      </label>
      <br />
      <button type="submit">Submit</button>
    </form>
  );
}

export default MyForm;